name: Build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: [ push ]

env:
  main_image: ghcr.io/${{ github.repository }}
  cache_image: ghcr.io/${{ github.repository }}/cache:cache

jobs:
  setup:
    name: Set variables
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: "Set image version"
        id: constants
        run: |
          export version="$(date +%Y%m%d%H%M%S)-$(git describe --always --dirty --exclude '*')"
          echo "::set-output name=VERSION::${version}"
    outputs:
      VERSION: "${{ steps.constants.outputs.VERSION }}"
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: setup
    env:
      VERSION: "${{ needs.setup.outputs.VERSION }}"
    steps:
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - uses: actions/checkout@v3
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and possibly push
        env:
          EARTHLY_PUSH: "${{ github.ref == 'refs/heads/main' }}"
          THEMOVIEDB_API_TOKEN: "${{ secrets.THEMOVIEDB_API_TOKEN }}"
        run: |
          ./earthlyw --version
          ./earthlyw --ci --output "--remote-cache=${cache_image}" --secret=THEMOVIEDB_API_TOKEN +deploy "--main_image=${main_image}" "--VERSION=${VERSION}"
      - name: Save manifests for later deploy
        uses: actions/upload-artifact@v3
        with:
          name: manifests
          path: deploy.yaml
#  deploy:
#    name: Deploy
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#    needs:
#      - setup
#      - build
#    steps:
#      - name: Download manifests from build
#        uses: actions/download-artifact@v3
#        with:
#          name: manifests
#      - name: Install kubectl
#        uses: azure/setup-kubectl@v3
#        id: install
#      - name: Configure kubectl
#        run: |
#          KUBECONFIG=$(mktemp --suffix kubeconfig)
#          echo "${{ secrets.KUBECONFIG }}" > "${KUBECONFIG}"
#          echo "KUBECONFIG=${KUBECONFIG}" >> ${GITHUB_ENV}
#      - id: join-zt
#        name: Join ZeroTier network
#        uses: mortenlj/zerotier-actions/join-zt@main
#        with:
#          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}
#          api_accesstoken: ${{ secrets.ZEROTIER_API_ACCESSTOKEN }}
#      - name: Run kubectl apply
#        run: |
#          echo "::group::ZeroTier debugging"
#          sudo zerotier-cli peers
#          sudo zerotier-cli listnetworks
#          ping -c 5 k3s.oci.zt.ibidem.no
#          echo "::endgroup::"
#          ${{ steps.install.outputs.kubectl-path}} apply --namespace=default --context=k3s-oci --filename=deploy.yaml --selector=app.kubernetes.io/name=homely-mqtt --prune=true --wait=true --timeout=60s
#      - name: Leave ZeroTier network
#        if: always()
#        uses: mortenlj/zerotier-actions/leave-zt@main
#        with:
#          node_id: ${{ steps.join-zt.outputs.node_id }}
#          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}
#          api_accesstoken: ${{ secrets.ZEROTIER_API_ACCESSTOKEN }}
